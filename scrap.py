import json
import random
import re
import requests

from bs4 import BeautifulSoup
from math import ceil


def category():
    cat_list = []

    category_url = 'http://www.brainyquote.com/quotes/topics.html'
    html = requests.get(category_url) 
    soup = BeautifulSoup(html.text, "html.parser") 

    # Get all links with href matching the regex
    category = soup.find_all('a',{"href" : re.compile("/topics/")}) 
    for name in category:
        cat_list.append(name.text.strip())

    return cat_list

def quotes(category, numberOfQuotes):
    quotes_list = []

    url = "http://www.brainyquote.com/quotes/topics/" + category + ".html"
    html = requests.get(url)
    soup = BeautifulSoup(html.text, features="html.parser")
    
    # div id of the quotes are generated by position with the format:
    # "qpos_%page%_%element%"
    # where element <- [1, .. 26] and page <- [1..] with infinite scroll
    times = 1
    if (numberOfQuotes > 26):
        # Scrolling is required as there are not enough quotes in the page
        times = ceil(numberOfQuotes/26)
        print("Getting %d pages..." % (times))
    
    x = y = n = 0
    while (n < numberOfQuotes):
        y = (y % 26) + 1    # List starts at 1
        if (y == 1):        # New Page must be loaded
            x += 1
            # We can get each page individually with "%category%_[1..]"
            url = "http://www.brainyquote.com/quotes/topics/" + category + "_" + str(x)
            html = requests.get(url)
            soup = BeautifulSoup(html.text, features="html.parser")
        
        divID = "pos_" + str(x) + "_" + str(y)
        find = soup.find("div", {"id": divID})
        if find is not None:
            quotes_list.append(find.text.replace('\n\n\n\n','\n').strip())

        n += 1

    return quotes_list


if __name__ == "__main__":
    # Demo: Get 40 quotes of the category 'Amazing'
    print("Category '%s'" % category()[2])
    demoResult = quotes(category()[2], 40)
    print("Got %d quotes" % len(demoResult))
    print("Example: %s" % demoResult[0])


